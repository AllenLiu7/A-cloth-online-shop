{"ast":null,"code":"import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport { shopItemActionTypes } from \"./shop-item.types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop-item.actions\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nexport function* fetchCollectionsAsync() {\n  try {\n    const collectionRef = firestore.collection(\"collections\");\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure);\n  }\n} //only listen to the start action then trigger the following\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(shopItemActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["E:/Projects/Ecommerce/ecommerce_project/src/redux/shop-items/shop-item.sagas.js"],"names":["call","put","takeEvery","takeLatest","shopItemActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionsMap","error","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,EAA+BC,UAA/B,QAAiD,oBAAjD;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,qBAHP;AAKA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAKA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAC/BQ,+BAD+B,EAE/BI,QAF+B,CAAjC;AAIA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMd,GAAG,CAACK,uBAAD,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUU,qBAAV,GAAkC;AACvC,QAAMd,SAAS,CACbE,mBAAmB,CAACa,uBADP,EAEbR,qBAFa,CAAf;AAID","sourcesContent":["import { call, put, takeEvery, takeLatest } from \"redux-saga/effects\";\r\n\r\nimport { shopItemActionTypes } from \"./shop-item.types\";\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure,\r\n} from \"./shop-item.actions\";\r\n\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  try {\r\n    const collectionRef = firestore.collection(\"collections\");\r\n    const snapshot = yield collectionRef.get();\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      snapshot\r\n    );\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure);\r\n  }\r\n}\r\n\r\n//only listen to the start action then trigger the following\r\nexport function* fetchCollectionsStart() {\r\n  yield takeEvery(\r\n    shopItemActionTypes.FETCH_COLLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}